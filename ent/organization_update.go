// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	entdomain "RouteHub.Service.Dashboard/ent/domain"
	enthub "RouteHub.Service.Dashboard/ent/hub"
	"RouteHub.Service.Dashboard/ent/organization"
	"RouteHub.Service.Dashboard/ent/person"
	"RouteHub.Service.Dashboard/ent/predicate"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"RouteHub.Service.Dashboard/ent/schema/types"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetWebsite sets the "website" field.
func (ou *OrganizationUpdate) SetWebsite(s string) *OrganizationUpdate {
	ou.mutation.SetWebsite(s)
	return ou
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableWebsite(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetWebsite(*s)
	}
	return ou
}

// ClearWebsite clears the value of the "website" field.
func (ou *OrganizationUpdate) ClearWebsite() *OrganizationUpdate {
	ou.mutation.ClearWebsite()
	return ou
}

// SetDescription sets the "description" field.
func (ou *OrganizationUpdate) SetDescription(s string) *OrganizationUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDescription(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// ClearDescription clears the value of the "description" field.
func (ou *OrganizationUpdate) ClearDescription() *OrganizationUpdate {
	ou.mutation.ClearDescription()
	return ou
}

// SetLocation sets the "location" field.
func (ou *OrganizationUpdate) SetLocation(s string) *OrganizationUpdate {
	ou.mutation.SetLocation(s)
	return ou
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableLocation(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetLocation(*s)
	}
	return ou
}

// ClearLocation clears the value of the "location" field.
func (ou *OrganizationUpdate) ClearLocation() *OrganizationUpdate {
	ou.mutation.ClearLocation()
	return ou
}

// SetSocialMedias sets the "social_medias" field.
func (ou *OrganizationUpdate) SetSocialMedias(tm types.SocialMedias) *OrganizationUpdate {
	ou.mutation.SetSocialMedias(tm)
	return ou
}

// SetNillableSocialMedias sets the "social_medias" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSocialMedias(tm *types.SocialMedias) *OrganizationUpdate {
	if tm != nil {
		ou.SetSocialMedias(*tm)
	}
	return ou
}

// ClearSocialMedias clears the value of the "social_medias" field.
func (ou *OrganizationUpdate) ClearSocialMedias() *OrganizationUpdate {
	ou.mutation.ClearSocialMedias()
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrganizationUpdate) SetCreatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCreatedAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// AddDomainIDs adds the "domains" edge to the Domain entity by IDs.
func (ou *OrganizationUpdate) AddDomainIDs(ids ...mixin.ID) *OrganizationUpdate {
	ou.mutation.AddDomainIDs(ids...)
	return ou
}

// AddDomains adds the "domains" edges to the Domain entity.
func (ou *OrganizationUpdate) AddDomains(d ...*Domain) *OrganizationUpdate {
	ids := make([]mixin.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.AddDomainIDs(ids...)
}

// AddHubIDs adds the "hubs" edge to the Hub entity by IDs.
func (ou *OrganizationUpdate) AddHubIDs(ids ...mixin.ID) *OrganizationUpdate {
	ou.mutation.AddHubIDs(ids...)
	return ou
}

// AddHubs adds the "hubs" edges to the Hub entity.
func (ou *OrganizationUpdate) AddHubs(h ...*Hub) *OrganizationUpdate {
	ids := make([]mixin.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ou.AddHubIDs(ids...)
}

// AddPersonIDs adds the "persons" edge to the Person entity by IDs.
func (ou *OrganizationUpdate) AddPersonIDs(ids ...mixin.ID) *OrganizationUpdate {
	ou.mutation.AddPersonIDs(ids...)
	return ou
}

// AddPersons adds the "persons" edges to the Person entity.
func (ou *OrganizationUpdate) AddPersons(p ...*Person) *OrganizationUpdate {
	ids := make([]mixin.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPersonIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearDomains clears all "domains" edges to the Domain entity.
func (ou *OrganizationUpdate) ClearDomains() *OrganizationUpdate {
	ou.mutation.ClearDomains()
	return ou
}

// RemoveDomainIDs removes the "domains" edge to Domain entities by IDs.
func (ou *OrganizationUpdate) RemoveDomainIDs(ids ...mixin.ID) *OrganizationUpdate {
	ou.mutation.RemoveDomainIDs(ids...)
	return ou
}

// RemoveDomains removes "domains" edges to Domain entities.
func (ou *OrganizationUpdate) RemoveDomains(d ...*Domain) *OrganizationUpdate {
	ids := make([]mixin.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.RemoveDomainIDs(ids...)
}

// ClearHubs clears all "hubs" edges to the Hub entity.
func (ou *OrganizationUpdate) ClearHubs() *OrganizationUpdate {
	ou.mutation.ClearHubs()
	return ou
}

// RemoveHubIDs removes the "hubs" edge to Hub entities by IDs.
func (ou *OrganizationUpdate) RemoveHubIDs(ids ...mixin.ID) *OrganizationUpdate {
	ou.mutation.RemoveHubIDs(ids...)
	return ou
}

// RemoveHubs removes "hubs" edges to Hub entities.
func (ou *OrganizationUpdate) RemoveHubs(h ...*Hub) *OrganizationUpdate {
	ids := make([]mixin.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ou.RemoveHubIDs(ids...)
}

// ClearPersons clears all "persons" edges to the Person entity.
func (ou *OrganizationUpdate) ClearPersons() *OrganizationUpdate {
	ou.mutation.ClearPersons()
	return ou
}

// RemovePersonIDs removes the "persons" edge to Person entities by IDs.
func (ou *OrganizationUpdate) RemovePersonIDs(ids ...mixin.ID) *OrganizationUpdate {
	ou.mutation.RemovePersonIDs(ids...)
	return ou
}

// RemovePersons removes "persons" edges to Person entities.
func (ou *OrganizationUpdate) RemovePersons(p ...*Person) *OrganizationUpdate {
	ids := make([]mixin.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePersonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrganizationUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	return nil
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if ou.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ou.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := ou.mutation.Location(); ok {
		_spec.SetField(organization.FieldLocation, field.TypeString, value)
	}
	if ou.mutation.LocationCleared() {
		_spec.ClearField(organization.FieldLocation, field.TypeString)
	}
	if value, ok := ou.mutation.SocialMedias(); ok {
		_spec.SetField(organization.FieldSocialMedias, field.TypeJSON, value)
	}
	if ou.mutation.SocialMediasCleared() {
		_spec.ClearField(organization.FieldSocialMedias, field.TypeJSON)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
	}
	if ou.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DomainsTable,
			Columns: []string{organization.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entdomain.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedDomainsIDs(); len(nodes) > 0 && !ou.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DomainsTable,
			Columns: []string{organization.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entdomain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DomainsTable,
			Columns: []string{organization.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entdomain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.HubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.HubsTable,
			Columns: []string{organization.HubsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enthub.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedHubsIDs(); len(nodes) > 0 && !ou.mutation.HubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.HubsTable,
			Columns: []string{organization.HubsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enthub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.HubsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.HubsTable,
			Columns: []string{organization.HubsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enthub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonsTable,
			Columns: organization.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPersonsIDs(); len(nodes) > 0 && !ou.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonsTable,
			Columns: organization.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonsTable,
			Columns: organization.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetWebsite sets the "website" field.
func (ouo *OrganizationUpdateOne) SetWebsite(s string) *OrganizationUpdateOne {
	ouo.mutation.SetWebsite(s)
	return ouo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableWebsite(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetWebsite(*s)
	}
	return ouo
}

// ClearWebsite clears the value of the "website" field.
func (ouo *OrganizationUpdateOne) ClearWebsite() *OrganizationUpdateOne {
	ouo.mutation.ClearWebsite()
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *OrganizationUpdateOne) SetDescription(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDescription(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// ClearDescription clears the value of the "description" field.
func (ouo *OrganizationUpdateOne) ClearDescription() *OrganizationUpdateOne {
	ouo.mutation.ClearDescription()
	return ouo
}

// SetLocation sets the "location" field.
func (ouo *OrganizationUpdateOne) SetLocation(s string) *OrganizationUpdateOne {
	ouo.mutation.SetLocation(s)
	return ouo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableLocation(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetLocation(*s)
	}
	return ouo
}

// ClearLocation clears the value of the "location" field.
func (ouo *OrganizationUpdateOne) ClearLocation() *OrganizationUpdateOne {
	ouo.mutation.ClearLocation()
	return ouo
}

// SetSocialMedias sets the "social_medias" field.
func (ouo *OrganizationUpdateOne) SetSocialMedias(tm types.SocialMedias) *OrganizationUpdateOne {
	ouo.mutation.SetSocialMedias(tm)
	return ouo
}

// SetNillableSocialMedias sets the "social_medias" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSocialMedias(tm *types.SocialMedias) *OrganizationUpdateOne {
	if tm != nil {
		ouo.SetSocialMedias(*tm)
	}
	return ouo
}

// ClearSocialMedias clears the value of the "social_medias" field.
func (ouo *OrganizationUpdateOne) ClearSocialMedias() *OrganizationUpdateOne {
	ouo.mutation.ClearSocialMedias()
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrganizationUpdateOne) SetCreatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCreatedAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// AddDomainIDs adds the "domains" edge to the Domain entity by IDs.
func (ouo *OrganizationUpdateOne) AddDomainIDs(ids ...mixin.ID) *OrganizationUpdateOne {
	ouo.mutation.AddDomainIDs(ids...)
	return ouo
}

// AddDomains adds the "domains" edges to the Domain entity.
func (ouo *OrganizationUpdateOne) AddDomains(d ...*Domain) *OrganizationUpdateOne {
	ids := make([]mixin.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.AddDomainIDs(ids...)
}

// AddHubIDs adds the "hubs" edge to the Hub entity by IDs.
func (ouo *OrganizationUpdateOne) AddHubIDs(ids ...mixin.ID) *OrganizationUpdateOne {
	ouo.mutation.AddHubIDs(ids...)
	return ouo
}

// AddHubs adds the "hubs" edges to the Hub entity.
func (ouo *OrganizationUpdateOne) AddHubs(h ...*Hub) *OrganizationUpdateOne {
	ids := make([]mixin.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ouo.AddHubIDs(ids...)
}

// AddPersonIDs adds the "persons" edge to the Person entity by IDs.
func (ouo *OrganizationUpdateOne) AddPersonIDs(ids ...mixin.ID) *OrganizationUpdateOne {
	ouo.mutation.AddPersonIDs(ids...)
	return ouo
}

// AddPersons adds the "persons" edges to the Person entity.
func (ouo *OrganizationUpdateOne) AddPersons(p ...*Person) *OrganizationUpdateOne {
	ids := make([]mixin.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPersonIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearDomains clears all "domains" edges to the Domain entity.
func (ouo *OrganizationUpdateOne) ClearDomains() *OrganizationUpdateOne {
	ouo.mutation.ClearDomains()
	return ouo
}

// RemoveDomainIDs removes the "domains" edge to Domain entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveDomainIDs(ids ...mixin.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveDomainIDs(ids...)
	return ouo
}

// RemoveDomains removes "domains" edges to Domain entities.
func (ouo *OrganizationUpdateOne) RemoveDomains(d ...*Domain) *OrganizationUpdateOne {
	ids := make([]mixin.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.RemoveDomainIDs(ids...)
}

// ClearHubs clears all "hubs" edges to the Hub entity.
func (ouo *OrganizationUpdateOne) ClearHubs() *OrganizationUpdateOne {
	ouo.mutation.ClearHubs()
	return ouo
}

// RemoveHubIDs removes the "hubs" edge to Hub entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveHubIDs(ids ...mixin.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveHubIDs(ids...)
	return ouo
}

// RemoveHubs removes "hubs" edges to Hub entities.
func (ouo *OrganizationUpdateOne) RemoveHubs(h ...*Hub) *OrganizationUpdateOne {
	ids := make([]mixin.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ouo.RemoveHubIDs(ids...)
}

// ClearPersons clears all "persons" edges to the Person entity.
func (ouo *OrganizationUpdateOne) ClearPersons() *OrganizationUpdateOne {
	ouo.mutation.ClearPersons()
	return ouo
}

// RemovePersonIDs removes the "persons" edge to Person entities by IDs.
func (ouo *OrganizationUpdateOne) RemovePersonIDs(ids ...mixin.ID) *OrganizationUpdateOne {
	ouo.mutation.RemovePersonIDs(ids...)
	return ouo
}

// RemovePersons removes "persons" edges to Person entities.
func (ouo *OrganizationUpdateOne) RemovePersons(p ...*Person) *OrganizationUpdateOne {
	ids := make([]mixin.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePersonIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrganizationUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if ouo.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ouo.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := ouo.mutation.Location(); ok {
		_spec.SetField(organization.FieldLocation, field.TypeString, value)
	}
	if ouo.mutation.LocationCleared() {
		_spec.ClearField(organization.FieldLocation, field.TypeString)
	}
	if value, ok := ouo.mutation.SocialMedias(); ok {
		_spec.SetField(organization.FieldSocialMedias, field.TypeJSON, value)
	}
	if ouo.mutation.SocialMediasCleared() {
		_spec.ClearField(organization.FieldSocialMedias, field.TypeJSON)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
	}
	if ouo.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DomainsTable,
			Columns: []string{organization.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entdomain.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedDomainsIDs(); len(nodes) > 0 && !ouo.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DomainsTable,
			Columns: []string{organization.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entdomain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DomainsTable,
			Columns: []string{organization.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entdomain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.HubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.HubsTable,
			Columns: []string{organization.HubsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enthub.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedHubsIDs(); len(nodes) > 0 && !ouo.mutation.HubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.HubsTable,
			Columns: []string{organization.HubsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enthub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.HubsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.HubsTable,
			Columns: []string{organization.HubsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enthub.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonsTable,
			Columns: organization.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPersonsIDs(); len(nodes) > 0 && !ouo.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonsTable,
			Columns: organization.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonsTable,
			Columns: organization.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
