// Code generated by ent, DO NOT EDIT.

package organization

import (
	"RouteHub.Service.Dashboard/ent/schema"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLocagtion holds the string denoting the locagtion field in the database.
	FieldLocagtion = "locagtion"
	// FieldSocialMedias holds the string denoting the social_medias field in the database.
	FieldSocialMedias = "social_medias"
	// EdgeDomains holds the string denoting the domains edge name in mutations.
	EdgeDomains = "domains"
	// EdgeHubs holds the string denoting the hubs edge name in mutations.
	EdgeHubs = "hubs"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// DomainsTable is the table that holds the domains relation/edge.
	DomainsTable = "domains"
	// DomainsInverseTable is the table name for the Domain entity.
	// It exists in this package in order to avoid circular dependency with the "entdomain" package.
	DomainsInverseTable = "domains"
	// DomainsColumn is the table column denoting the domains relation/edge.
	DomainsColumn = "organization_id"
	// HubsTable is the table that holds the hubs relation/edge.
	HubsTable = "hubs"
	// HubsInverseTable is the table name for the Hub entity.
	// It exists in this package in order to avoid circular dependency with the "enthub" package.
	HubsInverseTable = "hubs"
	// HubsColumn is the table column denoting the hubs relation/edge.
	HubsColumn = "organization_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldWebsite,
	FieldDescription,
	FieldLocagtion,
	FieldSocialMedias,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() schema.OrganizationID
)

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLocagtion orders the results by the locagtion field.
func ByLocagtion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocagtion, opts...).ToFunc()
}

// ByDomainsCount orders the results by domains count.
func ByDomainsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDomainsStep(), opts...)
	}
}

// ByDomains orders the results by domains terms.
func ByDomains(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDomainsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHubsCount orders the results by hubs count.
func ByHubsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHubsStep(), opts...)
	}
}

// ByHubs orders the results by hubs terms.
func ByHubs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHubsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDomainsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DomainsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DomainsTable, DomainsColumn),
	)
}
func newHubsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HubsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HubsTable, HubsColumn),
	)
}
