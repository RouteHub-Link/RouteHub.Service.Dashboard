// Code generated by "enumer -type=RedirectionOption -trimprefix=RedirectionOption -transform=snake-upper -json -sql -values -gqlgen"; DO NOT EDIT.

package platform

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _RedirectionOptionName = "TIMEDNOT_AUTO_REDIRECTDIRECT_HTTP_REDIRECTCONFIRM_REDIRECTCUSTOM"

var _RedirectionOptionIndex = [...]uint8{0, 5, 22, 42, 58, 64}

const _RedirectionOptionLowerName = "timednot_auto_redirectdirect_http_redirectconfirm_redirectcustom"

func (i RedirectionOption) String() string {
	if i < 0 || i >= RedirectionOption(len(_RedirectionOptionIndex)-1) {
		return fmt.Sprintf("RedirectionOption(%d)", i)
	}
	return _RedirectionOptionName[_RedirectionOptionIndex[i]:_RedirectionOptionIndex[i+1]]
}

func (RedirectionOption) Values() []string {
	return RedirectionOptionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RedirectionOptionNoOp() {
	var x [1]struct{}
	_ = x[Timed-(0)]
	_ = x[NotAutoRedirect-(1)]
	_ = x[DirectHTTPRedirect-(2)]
	_ = x[ConfirmRedirect-(3)]
	_ = x[Custom-(4)]
}

var _RedirectionOptionValues = []RedirectionOption{Timed, NotAutoRedirect, DirectHTTPRedirect, ConfirmRedirect, Custom}

var _RedirectionOptionNameToValueMap = map[string]RedirectionOption{
	_RedirectionOptionName[0:5]:        Timed,
	_RedirectionOptionLowerName[0:5]:   Timed,
	_RedirectionOptionName[5:22]:       NotAutoRedirect,
	_RedirectionOptionLowerName[5:22]:  NotAutoRedirect,
	_RedirectionOptionName[22:42]:      DirectHTTPRedirect,
	_RedirectionOptionLowerName[22:42]: DirectHTTPRedirect,
	_RedirectionOptionName[42:58]:      ConfirmRedirect,
	_RedirectionOptionLowerName[42:58]: ConfirmRedirect,
	_RedirectionOptionName[58:64]:      Custom,
	_RedirectionOptionLowerName[58:64]: Custom,
}

var _RedirectionOptionNames = []string{
	_RedirectionOptionName[0:5],
	_RedirectionOptionName[5:22],
	_RedirectionOptionName[22:42],
	_RedirectionOptionName[42:58],
	_RedirectionOptionName[58:64],
}

// RedirectionOptionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RedirectionOptionString(s string) (RedirectionOption, error) {
	if val, ok := _RedirectionOptionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RedirectionOptionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RedirectionOption values", s)
}

// RedirectionOptionValues returns all values of the enum
func RedirectionOptionValues() []RedirectionOption {
	return _RedirectionOptionValues
}

// RedirectionOptionStrings returns a slice of all String values of the enum
func RedirectionOptionStrings() []string {
	strs := make([]string, len(_RedirectionOptionNames))
	copy(strs, _RedirectionOptionNames)
	return strs
}

// IsARedirectionOption returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RedirectionOption) IsARedirectionOption() bool {
	for _, v := range _RedirectionOptionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RedirectionOption
func (i RedirectionOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RedirectionOption
func (i *RedirectionOption) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RedirectionOption should be a string, got %s", data)
	}

	var err error
	*i, err = RedirectionOptionString(s)
	return err
}

func (i RedirectionOption) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *RedirectionOption) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of RedirectionOption: %[1]T(%[1]v)", value)
	}

	val, err := RedirectionOptionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for RedirectionOption
func (i RedirectionOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for RedirectionOption
func (i *RedirectionOption) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("RedirectionOption should be a string, got %T", value)
	}

	var err error
	*i, err = RedirectionOptionString(str)
	return err
}
