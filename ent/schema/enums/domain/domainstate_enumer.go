// Code generated by "enumer -type=DomainState -trimprefix=DomainState -transform=snake-upper -json -sql -values -gqlgen"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _DomainStateName = "PASSIVEDNS_STATUS_PENDINGDNS_STATUS_VERIFIEDDNS_STATUS_FAILEDACTIVE"

var _DomainStateIndex = [...]uint8{0, 7, 25, 44, 61, 67}

const _DomainStateLowerName = "passivedns_status_pendingdns_status_verifieddns_status_failedactive"

func (i DomainState) String() string {
	if i < 0 || i >= DomainState(len(_DomainStateIndex)-1) {
		return fmt.Sprintf("DomainState(%d)", i)
	}
	return _DomainStateName[_DomainStateIndex[i]:_DomainStateIndex[i+1]]
}

func (DomainState) Values() []string {
	return DomainStateStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DomainStateNoOp() {
	var x [1]struct{}
	_ = x[Passive-(0)]
	_ = x[DNSStatusPending-(1)]
	_ = x[DNSStatusVerified-(2)]
	_ = x[DNSStatusFailed-(3)]
	_ = x[Active-(4)]
}

var _DomainStateValues = []DomainState{Passive, DNSStatusPending, DNSStatusVerified, DNSStatusFailed, Active}

var _DomainStateNameToValueMap = map[string]DomainState{
	_DomainStateName[0:7]:        Passive,
	_DomainStateLowerName[0:7]:   Passive,
	_DomainStateName[7:25]:       DNSStatusPending,
	_DomainStateLowerName[7:25]:  DNSStatusPending,
	_DomainStateName[25:44]:      DNSStatusVerified,
	_DomainStateLowerName[25:44]: DNSStatusVerified,
	_DomainStateName[44:61]:      DNSStatusFailed,
	_DomainStateLowerName[44:61]: DNSStatusFailed,
	_DomainStateName[61:67]:      Active,
	_DomainStateLowerName[61:67]: Active,
}

var _DomainStateNames = []string{
	_DomainStateName[0:7],
	_DomainStateName[7:25],
	_DomainStateName[25:44],
	_DomainStateName[44:61],
	_DomainStateName[61:67],
}

// DomainStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DomainStateString(s string) (DomainState, error) {
	if val, ok := _DomainStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DomainStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DomainState values", s)
}

// DomainStateValues returns all values of the enum
func DomainStateValues() []DomainState {
	return _DomainStateValues
}

// DomainStateStrings returns a slice of all String values of the enum
func DomainStateStrings() []string {
	strs := make([]string, len(_DomainStateNames))
	copy(strs, _DomainStateNames)
	return strs
}

// IsADomainState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DomainState) IsADomainState() bool {
	for _, v := range _DomainStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DomainState
func (i DomainState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DomainState
func (i *DomainState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DomainState should be a string, got %s", data)
	}

	var err error
	*i, err = DomainStateString(s)
	return err
}

func (i DomainState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DomainState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of DomainState: %[1]T(%[1]v)", value)
	}

	val, err := DomainStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for DomainState
func (i DomainState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for DomainState
func (i *DomainState) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("DomainState should be a string, got %T", value)
	}

	var err error
	*i, err = DomainStateString(str)
	return err
}
