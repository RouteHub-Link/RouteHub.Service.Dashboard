// Code generated by "enumer -type=StatusState -trimprefix=StatusState -transform=snake-upper -json -sql -values -gqlgen"; DO NOT EDIT.

package enums

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _StatusStateName = "STATUS_INACTIVESTATUS_ACTIVE"

var _StatusStateIndex = [...]uint8{0, 15, 28}

const _StatusStateLowerName = "status_inactivestatus_active"

func (i StatusState) String() string {
	if i < 0 || i >= StatusState(len(_StatusStateIndex)-1) {
		return fmt.Sprintf("StatusState(%d)", i)
	}
	return _StatusStateName[_StatusStateIndex[i]:_StatusStateIndex[i+1]]
}

func (StatusState) Values() []string {
	return StatusStateStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusStateNoOp() {
	var x [1]struct{}
	_ = x[StatusInactive-(0)]
	_ = x[StatusActive-(1)]
}

var _StatusStateValues = []StatusState{StatusInactive, StatusActive}

var _StatusStateNameToValueMap = map[string]StatusState{
	_StatusStateName[0:15]:       StatusInactive,
	_StatusStateLowerName[0:15]:  StatusInactive,
	_StatusStateName[15:28]:      StatusActive,
	_StatusStateLowerName[15:28]: StatusActive,
}

var _StatusStateNames = []string{
	_StatusStateName[0:15],
	_StatusStateName[15:28],
}

// StatusStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusStateString(s string) (StatusState, error) {
	if val, ok := _StatusStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StatusState values", s)
}

// StatusStateValues returns all values of the enum
func StatusStateValues() []StatusState {
	return _StatusStateValues
}

// StatusStateStrings returns a slice of all String values of the enum
func StatusStateStrings() []string {
	strs := make([]string, len(_StatusStateNames))
	copy(strs, _StatusStateNames)
	return strs
}

// IsAStatusState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StatusState) IsAStatusState() bool {
	for _, v := range _StatusStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StatusState
func (i StatusState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StatusState
func (i *StatusState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StatusState should be a string, got %s", data)
	}

	var err error
	*i, err = StatusStateString(s)
	return err
}

func (i StatusState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *StatusState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of StatusState: %[1]T(%[1]v)", value)
	}

	val, err := StatusStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for StatusState
func (i StatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for StatusState
func (i *StatusState) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("StatusState should be a string, got %T", value)
	}

	var err error
	*i, err = StatusStateString(str)
	return err
}
