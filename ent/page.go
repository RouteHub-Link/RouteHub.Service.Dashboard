// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"RouteHub.Service.Dashboard/ent/hub"
	"RouteHub.Service.Dashboard/ent/page"
	"RouteHub.Service.Dashboard/ent/schema/enums"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"RouteHub.Service.Dashboard/ent/schema/types"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Page is the model entity for the Page schema.
type Page struct {
	config `json:"-"`
	// ID of the ent.
	ID mixin.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// PageDescription holds the value of the "page_description" field.
	PageDescription string `json:"page_description,omitempty"`
	// PageContentJSON holds the value of the "page_content_json" field.
	PageContentJSON string `json:"page_content_json,omitempty"`
	// PageContentHTML holds the value of the "page_content_html" field.
	PageContentHTML string `json:"page_content_html,omitempty"`
	// Status holds the value of the "status" field.
	Status enums.StatusState `json:"status,omitempty"`
	// MetaDescription holds the value of the "meta_description" field.
	MetaDescription *types.MetaDescription `json:"meta_description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PageQuery when eager-loading is set.
	Edges        PageEdges `json:"edges"`
	hub_fk       *mixin.ID
	selectValues sql.SelectValues
}

// PageEdges holds the relations/edges for other nodes in the graph.
type PageEdges struct {
	// Hub holds the value of the hub edge.
	Hub *Hub `json:"hub,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HubOrErr returns the Hub value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageEdges) HubOrErr() (*Hub, error) {
	if e.Hub != nil {
		return e.Hub, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: hub.Label}
	}
	return nil, &NotLoadedError{edge: "hub"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Page) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case page.FieldMetaDescription:
			values[i] = new([]byte)
		case page.FieldStatus:
			values[i] = new(enums.StatusState)
		case page.FieldID, page.FieldName, page.FieldSlug, page.FieldPageDescription, page.FieldPageContentJSON, page.FieldPageContentHTML:
			values[i] = new(sql.NullString)
		case page.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case page.ForeignKeys[0]: // hub_fk
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Page fields.
func (pa *Page) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case page.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = mixin.ID(value.String)
			}
		case page.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case page.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				pa.Slug = value.String
			}
		case page.FieldPageDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_description", values[i])
			} else if value.Valid {
				pa.PageDescription = value.String
			}
		case page.FieldPageContentJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_content_json", values[i])
			} else if value.Valid {
				pa.PageContentJSON = value.String
			}
		case page.FieldPageContentHTML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_content_html", values[i])
			} else if value.Valid {
				pa.PageContentHTML = value.String
			}
		case page.FieldStatus:
			if value, ok := values[i].(*enums.StatusState); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				pa.Status = *value
			}
		case page.FieldMetaDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta_description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pa.MetaDescription); err != nil {
					return fmt.Errorf("unmarshal field meta_description: %w", err)
				}
			}
		case page.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case page.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hub_fk", values[i])
			} else if value.Valid {
				pa.hub_fk = new(mixin.ID)
				*pa.hub_fk = mixin.ID(value.String)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Page.
// This includes values selected through modifiers, order, etc.
func (pa *Page) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryHub queries the "hub" edge of the Page entity.
func (pa *Page) QueryHub() *HubQuery {
	return NewPageClient(pa.config).QueryHub(pa)
}

// Update returns a builder for updating this Page.
// Note that you need to call Page.Unwrap() before calling this method if this Page
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Page) Update() *PageUpdateOne {
	return NewPageClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Page entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Page) Unwrap() *Page {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Page is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Page) String() string {
	var builder strings.Builder
	builder.WriteString("Page(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(pa.Slug)
	builder.WriteString(", ")
	builder.WriteString("page_description=")
	builder.WriteString(pa.PageDescription)
	builder.WriteString(", ")
	builder.WriteString("page_content_json=")
	builder.WriteString(pa.PageContentJSON)
	builder.WriteString(", ")
	builder.WriteString("page_content_html=")
	builder.WriteString(pa.PageContentHTML)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteString(", ")
	builder.WriteString("meta_description=")
	builder.WriteString(fmt.Sprintf("%v", pa.MetaDescription))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pages is a parsable slice of Page.
type Pages []*Page
