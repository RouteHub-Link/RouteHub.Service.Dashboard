// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	entdomain "RouteHub.Service.Dashboard/ent/domain"
	"RouteHub.Service.Dashboard/ent/hub"
	"RouteHub.Service.Dashboard/ent/organization"
	"RouteHub.Service.Dashboard/ent/schema/enums"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"RouteHub.Service.Dashboard/ent/schema/types"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Hub is the model entity for the Hub schema.
type Hub struct {
	config `json:"-"`
	// ID of the ent.
	ID mixin.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// HubDetails holds the value of the "hub_details" field.
	HubDetails types.HubDetails `json:"hub_details,omitempty"`
	// TCPAddress holds the value of the "tcp_address" field.
	TCPAddress string `json:"tcp_address,omitempty"`
	// Status holds the value of the "status" field.
	Status enums.StatusState `json:"status,omitempty"`
	// DefaultRedirection holds the value of the "default_redirection" field.
	DefaultRedirection enums.RedirectionChoice `json:"default_redirection,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HubQuery when eager-loading is set.
	Edges           HubEdges `json:"edges"`
	domain_fk       *mixin.ID
	organization_id *mixin.ID
	selectValues    sql.SelectValues
}

// HubEdges holds the relations/edges for other nodes in the graph.
type HubEdges struct {
	// Domain holds the value of the domain edge.
	Domain *Domain `json:"domain,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Links holds the value of the links edge.
	Links []*Link `json:"links,omitempty"`
	// Pages holds the value of the pages edge.
	Pages []*Page `json:"pages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HubEdges) DomainOrErr() (*Domain, error) {
	if e.Domain != nil {
		return e.Domain, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entdomain.Label}
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HubEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// LinksOrErr returns the Links value or an error if the edge
// was not loaded in eager-loading.
func (e HubEdges) LinksOrErr() ([]*Link, error) {
	if e.loadedTypes[2] {
		return e.Links, nil
	}
	return nil, &NotLoadedError{edge: "links"}
}

// PagesOrErr returns the Pages value or an error if the edge
// was not loaded in eager-loading.
func (e HubEdges) PagesOrErr() ([]*Page, error) {
	if e.loadedTypes[3] {
		return e.Pages, nil
	}
	return nil, &NotLoadedError{edge: "pages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hub) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hub.FieldHubDetails:
			values[i] = new([]byte)
		case hub.FieldDefaultRedirection:
			values[i] = new(enums.RedirectionChoice)
		case hub.FieldStatus:
			values[i] = new(enums.StatusState)
		case hub.FieldID, hub.FieldName, hub.FieldSlug, hub.FieldTCPAddress:
			values[i] = new(sql.NullString)
		case hub.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case hub.ForeignKeys[0]: // domain_fk
			values[i] = new(sql.NullString)
		case hub.ForeignKeys[1]: // organization_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hub fields.
func (h *Hub) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hub.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = mixin.ID(value.String)
			}
		case hub.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hub.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				h.Slug = value.String
			}
		case hub.FieldHubDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hub_details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.HubDetails); err != nil {
					return fmt.Errorf("unmarshal field hub_details: %w", err)
				}
			}
		case hub.FieldTCPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tcp_address", values[i])
			} else if value.Valid {
				h.TCPAddress = value.String
			}
		case hub.FieldStatus:
			if value, ok := values[i].(*enums.StatusState); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				h.Status = *value
			}
		case hub.FieldDefaultRedirection:
			if value, ok := values[i].(*enums.RedirectionChoice); !ok {
				return fmt.Errorf("unexpected type %T for field default_redirection", values[i])
			} else if value != nil {
				h.DefaultRedirection = *value
			}
		case hub.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case hub.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_fk", values[i])
			} else if value.Valid {
				h.domain_fk = new(mixin.ID)
				*h.domain_fk = mixin.ID(value.String)
			}
		case hub.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				h.organization_id = new(mixin.ID)
				*h.organization_id = mixin.ID(value.String)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Hub.
// This includes values selected through modifiers, order, etc.
func (h *Hub) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryDomain queries the "domain" edge of the Hub entity.
func (h *Hub) QueryDomain() *DomainQuery {
	return NewHubClient(h.config).QueryDomain(h)
}

// QueryOrganization queries the "organization" edge of the Hub entity.
func (h *Hub) QueryOrganization() *OrganizationQuery {
	return NewHubClient(h.config).QueryOrganization(h)
}

// QueryLinks queries the "links" edge of the Hub entity.
func (h *Hub) QueryLinks() *LinkQuery {
	return NewHubClient(h.config).QueryLinks(h)
}

// QueryPages queries the "pages" edge of the Hub entity.
func (h *Hub) QueryPages() *PageQuery {
	return NewHubClient(h.config).QueryPages(h)
}

// Update returns a builder for updating this Hub.
// Note that you need to call Hub.Unwrap() before calling this method if this Hub
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hub) Update() *HubUpdateOne {
	return NewHubClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hub entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hub) Unwrap() *Hub {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hub is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hub) String() string {
	var builder strings.Builder
	builder.WriteString("Hub(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(h.Slug)
	builder.WriteString(", ")
	builder.WriteString("hub_details=")
	builder.WriteString(fmt.Sprintf("%v", h.HubDetails))
	builder.WriteString(", ")
	builder.WriteString("tcp_address=")
	builder.WriteString(h.TCPAddress)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", h.Status))
	builder.WriteString(", ")
	builder.WriteString("default_redirection=")
	builder.WriteString(fmt.Sprintf("%v", h.DefaultRedirection))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Hubs is a parsable slice of Hub.
type Hubs []*Hub
