// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	enthub "RouteHub.Service.Dashboard/ent/hub"
	"RouteHub.Service.Dashboard/ent/link"
	"RouteHub.Service.Dashboard/ent/schema/enums"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"RouteHub.Service.Dashboard/ent/schema/types"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Link is the model entity for the Link schema.
type Link struct {
	config `json:"-"`
	// ID of the ent.
	ID mixin.ID `json:"id,omitempty"`
	// Target holds the value of the "target" field.
	Target string `json:"target,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// LinkContent holds the value of the "link_content" field.
	LinkContent types.LinkContent `json:"link_content,omitempty"`
	// Status holds the value of the "status" field.
	Status enums.StatusState `json:"status,omitempty"`
	// RedirectionChoice holds the value of the "redirection_choice" field.
	RedirectionChoice enums.RedirectionChoice `json:"redirection_choice,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LinkQuery when eager-loading is set.
	Edges        LinkEdges `json:"edges"`
	link_fk      *mixin.ID
	selectValues sql.SelectValues
}

// LinkEdges holds the relations/edges for other nodes in the graph.
type LinkEdges struct {
	// Hub holds the value of the hub edge.
	Hub *Hub `json:"hub,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HubOrErr returns the Hub value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LinkEdges) HubOrErr() (*Hub, error) {
	if e.Hub != nil {
		return e.Hub, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: enthub.Label}
	}
	return nil, &NotLoadedError{edge: "hub"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Link) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case link.FieldLinkContent:
			values[i] = new([]byte)
		case link.FieldRedirectionChoice:
			values[i] = new(enums.RedirectionChoice)
		case link.FieldStatus:
			values[i] = new(enums.StatusState)
		case link.FieldID, link.FieldTarget, link.FieldPath:
			values[i] = new(sql.NullString)
		case link.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case link.ForeignKeys[0]: // link_fk
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Link fields.
func (l *Link) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case link.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = mixin.ID(value.String)
			}
		case link.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				l.Target = value.String
			}
		case link.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				l.Path = value.String
			}
		case link.FieldLinkContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field link_content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &l.LinkContent); err != nil {
					return fmt.Errorf("unmarshal field link_content: %w", err)
				}
			}
		case link.FieldStatus:
			if value, ok := values[i].(*enums.StatusState); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				l.Status = *value
			}
		case link.FieldRedirectionChoice:
			if value, ok := values[i].(*enums.RedirectionChoice); !ok {
				return fmt.Errorf("unexpected type %T for field redirection_choice", values[i])
			} else if value != nil {
				l.RedirectionChoice = *value
			}
		case link.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case link.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_fk", values[i])
			} else if value.Valid {
				l.link_fk = new(mixin.ID)
				*l.link_fk = mixin.ID(value.String)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Link.
// This includes values selected through modifiers, order, etc.
func (l *Link) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryHub queries the "hub" edge of the Link entity.
func (l *Link) QueryHub() *HubQuery {
	return NewLinkClient(l.config).QueryHub(l)
}

// Update returns a builder for updating this Link.
// Note that you need to call Link.Unwrap() before calling this method if this Link
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Link) Update() *LinkUpdateOne {
	return NewLinkClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Link entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Link) Unwrap() *Link {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Link is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Link) String() string {
	var builder strings.Builder
	builder.WriteString("Link(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("target=")
	builder.WriteString(l.Target)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(l.Path)
	builder.WriteString(", ")
	builder.WriteString("link_content=")
	builder.WriteString(fmt.Sprintf("%v", l.LinkContent))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", l.Status))
	builder.WriteString(", ")
	builder.WriteString("redirection_choice=")
	builder.WriteString(fmt.Sprintf("%v", l.RedirectionChoice))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Links is a parsable slice of Link.
type Links []*Link
