// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	entdomain "RouteHub.Service.Dashboard/ent/domain"
	enthub "RouteHub.Service.Dashboard/ent/hub"
	"RouteHub.Service.Dashboard/ent/link"
	"RouteHub.Service.Dashboard/ent/organization"
	"RouteHub.Service.Dashboard/ent/predicate"
	"RouteHub.Service.Dashboard/ent/schema"
	"RouteHub.Service.Dashboard/ent/schema/enums"
	hub "RouteHub.Service.Dashboard/ent/schema/enums/hub"
	"RouteHub.Service.Dashboard/ent/schema/enums/domain"
	"RouteHub.Service.Dashboard/ent/schema/types"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDomain       = "Domain"
	TypeHub          = "Hub"
	TypeLink         = "Link"
	TypeOrganization = "Organization"
)

// DomainMutation represents an operation that mutates the Domain nodes in the graph.
type DomainMutation struct {
	config
	op                  Op
	typ                 string
	id                  *schema.DomainID
	name                *string
	url                 *string
	status              *domain.DomainState
	clearedFields       map[string]struct{}
	hub                 *schema.HubID
	clearedhub          bool
	organization        *schema.OrganizationID
	clearedorganization bool
	done                bool
	oldValue            func(context.Context) (*Domain, error)
	predicates          []predicate.Domain
}

var _ ent.Mutation = (*DomainMutation)(nil)

// domainOption allows management of the mutation configuration using functional options.
type domainOption func(*DomainMutation)

// newDomainMutation creates new mutation for the Domain entity.
func newDomainMutation(c config, op Op, opts ...domainOption) *DomainMutation {
	m := &DomainMutation{
		config:        c,
		op:            op,
		typ:           TypeDomain,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDomainID sets the ID field of the mutation.
func withDomainID(id schema.DomainID) domainOption {
	return func(m *DomainMutation) {
		var (
			err   error
			once  sync.Once
			value *Domain
		)
		m.oldValue = func(ctx context.Context) (*Domain, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Domain.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDomain sets the old Domain of the mutation.
func withDomain(node *Domain) domainOption {
	return func(m *DomainMutation) {
		m.oldValue = func(context.Context) (*Domain, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DomainMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DomainMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Domain entities.
func (m *DomainMutation) SetID(id schema.DomainID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DomainMutation) ID() (id schema.DomainID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DomainMutation) IDs(ctx context.Context) ([]schema.DomainID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []schema.DomainID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Domain.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DomainMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DomainMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DomainMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *DomainMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *DomainMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *DomainMutation) ResetURL() {
	m.url = nil
}

// SetStatus sets the "status" field.
func (m *DomainMutation) SetStatus(ds domain.DomainState) {
	m.status = &ds
}

// Status returns the value of the "status" field in the mutation.
func (m *DomainMutation) Status() (r domain.DomainState, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldStatus(ctx context.Context) (v domain.DomainState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DomainMutation) ResetStatus() {
	m.status = nil
}

// SetHubID sets the "hub" edge to the Hub entity by id.
func (m *DomainMutation) SetHubID(id schema.HubID) {
	m.hub = &id
}

// ClearHub clears the "hub" edge to the Hub entity.
func (m *DomainMutation) ClearHub() {
	m.clearedhub = true
}

// HubCleared reports if the "hub" edge to the Hub entity was cleared.
func (m *DomainMutation) HubCleared() bool {
	return m.clearedhub
}

// HubID returns the "hub" edge ID in the mutation.
func (m *DomainMutation) HubID() (id schema.HubID, exists bool) {
	if m.hub != nil {
		return *m.hub, true
	}
	return
}

// HubIDs returns the "hub" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HubID instead. It exists only for internal usage by the builders.
func (m *DomainMutation) HubIDs() (ids []schema.HubID) {
	if id := m.hub; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHub resets all changes to the "hub" edge.
func (m *DomainMutation) ResetHub() {
	m.hub = nil
	m.clearedhub = false
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *DomainMutation) SetOrganizationID(id schema.OrganizationID) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *DomainMutation) ClearOrganization() {
	m.clearedorganization = true
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *DomainMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *DomainMutation) OrganizationID() (id schema.OrganizationID, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *DomainMutation) OrganizationIDs() (ids []schema.OrganizationID) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *DomainMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// Where appends a list predicates to the DomainMutation builder.
func (m *DomainMutation) Where(ps ...predicate.Domain) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DomainMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DomainMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Domain, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DomainMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DomainMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Domain).
func (m *DomainMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DomainMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, entdomain.FieldName)
	}
	if m.url != nil {
		fields = append(fields, entdomain.FieldURL)
	}
	if m.status != nil {
		fields = append(fields, entdomain.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DomainMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entdomain.FieldName:
		return m.Name()
	case entdomain.FieldURL:
		return m.URL()
	case entdomain.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DomainMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entdomain.FieldName:
		return m.OldName(ctx)
	case entdomain.FieldURL:
		return m.OldURL(ctx)
	case entdomain.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Domain field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entdomain.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case entdomain.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case entdomain.FieldStatus:
		v, ok := value.(domain.DomainState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Domain field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DomainMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DomainMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Domain numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DomainMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DomainMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DomainMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Domain nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DomainMutation) ResetField(name string) error {
	switch name {
	case entdomain.FieldName:
		m.ResetName()
		return nil
	case entdomain.FieldURL:
		m.ResetURL()
		return nil
	case entdomain.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Domain field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DomainMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.hub != nil {
		edges = append(edges, entdomain.EdgeHub)
	}
	if m.organization != nil {
		edges = append(edges, entdomain.EdgeOrganization)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DomainMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entdomain.EdgeHub:
		if id := m.hub; id != nil {
			return []ent.Value{*id}
		}
	case entdomain.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DomainMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DomainMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DomainMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedhub {
		edges = append(edges, entdomain.EdgeHub)
	}
	if m.clearedorganization {
		edges = append(edges, entdomain.EdgeOrganization)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DomainMutation) EdgeCleared(name string) bool {
	switch name {
	case entdomain.EdgeHub:
		return m.clearedhub
	case entdomain.EdgeOrganization:
		return m.clearedorganization
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DomainMutation) ClearEdge(name string) error {
	switch name {
	case entdomain.EdgeHub:
		m.ClearHub()
		return nil
	case entdomain.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown Domain unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DomainMutation) ResetEdge(name string) error {
	switch name {
	case entdomain.EdgeHub:
		m.ResetHub()
		return nil
	case entdomain.EdgeOrganization:
		m.ResetOrganization()
		return nil
	}
	return fmt.Errorf("unknown Domain edge %s", name)
}

// HubMutation represents an operation that mutates the Hub nodes in the graph.
type HubMutation struct {
	config
	op                  Op
	typ                 string
	id                  *schema.HubID
	name                *string
	slug                *string
	_Hub_details        *types.HubDetails
	_TCPAddress         *string
	status              *enums.StatusState
	default_redirection *hub.RedirectionOption
	clearedFields       map[string]struct{}
	domain              *schema.DomainID
	cleareddomain       bool
	organization        *schema.OrganizationID
	clearedorganization bool
	links               map[schema.LinkID]struct{}
	removedlinks        map[schema.LinkID]struct{}
	clearedlinks        bool
	done                bool
	oldValue            func(context.Context) (*Hub, error)
	predicates          []predicate.Hub
}

var _ ent.Mutation = (*HubMutation)(nil)

// hubOption allows management of the mutation configuration using functional options.
type hubOption func(*HubMutation)

// newHubMutation creates new mutation for the Hub entity.
func newHubMutation(c config, op Op, opts ...hubOption) *HubMutation {
	m := &HubMutation{
		config:        c,
		op:            op,
		typ:           TypeHub,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHubID sets the ID field of the mutation.
func withHubID(id schema.HubID) hubOption {
	return func(m *HubMutation) {
		var (
			err   error
			once  sync.Once
			value *Hub
		)
		m.oldValue = func(ctx context.Context) (*Hub, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hub.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHub sets the old Hub of the mutation.
func withHub(node *Hub) hubOption {
	return func(m *HubMutation) {
		m.oldValue = func(context.Context) (*Hub, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HubMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HubMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Hub entities.
func (m *HubMutation) SetID(id schema.HubID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HubMutation) ID() (id schema.HubID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HubMutation) IDs(ctx context.Context) ([]schema.HubID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []schema.HubID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hub.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *HubMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HubMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Hub entity.
// If the Hub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HubMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HubMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *HubMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *HubMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Hub entity.
// If the Hub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HubMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *HubMutation) ResetSlug() {
	m.slug = nil
}

// SetHubDetails sets the "Hub_details" field.
func (m *HubMutation) SetHubDetails(td types.HubDetails) {
	m._Hub_details = &td
}

// HubDetails returns the value of the "Hub_details" field in the mutation.
func (m *HubMutation) HubDetails() (r types.HubDetails, exists bool) {
	v := m._Hub_details
	if v == nil {
		return
	}
	return *v, true
}

// OldHubDetails returns the old "Hub_details" field's value of the Hub entity.
// If the Hub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HubMutation) OldHubDetails(ctx context.Context) (v types.HubDetails, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHubDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHubDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHubDetails: %w", err)
	}
	return oldValue.HubDetails, nil
}

// ClearHubDetails clears the value of the "Hub_details" field.
func (m *HubMutation) ClearHubDetails() {
	m._Hub_details = nil
	m.clearedFields[enthub.FieldHubDetails] = struct{}{}
}

// HubDetailsCleared returns if the "Hub_details" field was cleared in this mutation.
func (m *HubMutation) HubDetailsCleared() bool {
	_, ok := m.clearedFields[enthub.FieldHubDetails]
	return ok
}

// ResetHubDetails resets all changes to the "Hub_details" field.
func (m *HubMutation) ResetHubDetails() {
	m._Hub_details = nil
	delete(m.clearedFields, enthub.FieldHubDetails)
}

// SetTCPAddress sets the "TCPAddress" field.
func (m *HubMutation) SetTCPAddress(s string) {
	m._TCPAddress = &s
}

// TCPAddress returns the value of the "TCPAddress" field in the mutation.
func (m *HubMutation) TCPAddress() (r string, exists bool) {
	v := m._TCPAddress
	if v == nil {
		return
	}
	return *v, true
}

// OldTCPAddress returns the old "TCPAddress" field's value of the Hub entity.
// If the Hub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HubMutation) OldTCPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTCPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTCPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTCPAddress: %w", err)
	}
	return oldValue.TCPAddress, nil
}

// ResetTCPAddress resets all changes to the "TCPAddress" field.
func (m *HubMutation) ResetTCPAddress() {
	m._TCPAddress = nil
}

// SetStatus sets the "status" field.
func (m *HubMutation) SetStatus(es enums.StatusState) {
	m.status = &es
}

// Status returns the value of the "status" field in the mutation.
func (m *HubMutation) Status() (r enums.StatusState, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Hub entity.
// If the Hub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HubMutation) OldStatus(ctx context.Context) (v enums.StatusState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *HubMutation) ResetStatus() {
	m.status = nil
}

// SetDefaultRedirection sets the "default_redirection" field.
func (m *HubMutation) SetDefaultRedirection(ho hub.RedirectionOption) {
	m.default_redirection = &ho
}

// DefaultRedirection returns the value of the "default_redirection" field in the mutation.
func (m *HubMutation) DefaultRedirection() (r hub.RedirectionOption, exists bool) {
	v := m.default_redirection
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultRedirection returns the old "default_redirection" field's value of the Hub entity.
// If the Hub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HubMutation) OldDefaultRedirection(ctx context.Context) (v hub.RedirectionOption, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultRedirection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultRedirection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultRedirection: %w", err)
	}
	return oldValue.DefaultRedirection, nil
}

// ResetDefaultRedirection resets all changes to the "default_redirection" field.
func (m *HubMutation) ResetDefaultRedirection() {
	m.default_redirection = nil
}

// SetDomainID sets the "domain" edge to the Domain entity by id.
func (m *HubMutation) SetDomainID(id schema.DomainID) {
	m.domain = &id
}

// ClearDomain clears the "domain" edge to the Domain entity.
func (m *HubMutation) ClearDomain() {
	m.cleareddomain = true
}

// DomainCleared reports if the "domain" edge to the Domain entity was cleared.
func (m *HubMutation) DomainCleared() bool {
	return m.cleareddomain
}

// DomainID returns the "domain" edge ID in the mutation.
func (m *HubMutation) DomainID() (id schema.DomainID, exists bool) {
	if m.domain != nil {
		return *m.domain, true
	}
	return
}

// DomainIDs returns the "domain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DomainID instead. It exists only for internal usage by the builders.
func (m *HubMutation) DomainIDs() (ids []schema.DomainID) {
	if id := m.domain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDomain resets all changes to the "domain" edge.
func (m *HubMutation) ResetDomain() {
	m.domain = nil
	m.cleareddomain = false
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *HubMutation) SetOrganizationID(id schema.OrganizationID) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *HubMutation) ClearOrganization() {
	m.clearedorganization = true
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *HubMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *HubMutation) OrganizationID() (id schema.OrganizationID, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *HubMutation) OrganizationIDs() (ids []schema.OrganizationID) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *HubMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// AddLinkIDs adds the "links" edge to the Link entity by ids.
func (m *HubMutation) AddLinkIDs(ids ...schema.LinkID) {
	if m.links == nil {
		m.links = make(map[schema.LinkID]struct{})
	}
	for i := range ids {
		m.links[ids[i]] = struct{}{}
	}
}

// ClearLinks clears the "links" edge to the Link entity.
func (m *HubMutation) ClearLinks() {
	m.clearedlinks = true
}

// LinksCleared reports if the "links" edge to the Link entity was cleared.
func (m *HubMutation) LinksCleared() bool {
	return m.clearedlinks
}

// RemoveLinkIDs removes the "links" edge to the Link entity by IDs.
func (m *HubMutation) RemoveLinkIDs(ids ...schema.LinkID) {
	if m.removedlinks == nil {
		m.removedlinks = make(map[schema.LinkID]struct{})
	}
	for i := range ids {
		delete(m.links, ids[i])
		m.removedlinks[ids[i]] = struct{}{}
	}
}

// RemovedLinks returns the removed IDs of the "links" edge to the Link entity.
func (m *HubMutation) RemovedLinksIDs() (ids []schema.LinkID) {
	for id := range m.removedlinks {
		ids = append(ids, id)
	}
	return
}

// LinksIDs returns the "links" edge IDs in the mutation.
func (m *HubMutation) LinksIDs() (ids []schema.LinkID) {
	for id := range m.links {
		ids = append(ids, id)
	}
	return
}

// ResetLinks resets all changes to the "links" edge.
func (m *HubMutation) ResetLinks() {
	m.links = nil
	m.clearedlinks = false
	m.removedlinks = nil
}

// Where appends a list predicates to the HubMutation builder.
func (m *HubMutation) Where(ps ...predicate.Hub) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HubMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HubMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hub, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HubMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HubMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hub).
func (m *HubMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HubMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, enthub.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, enthub.FieldSlug)
	}
	if m._Hub_details != nil {
		fields = append(fields, enthub.FieldHubDetails)
	}
	if m._TCPAddress != nil {
		fields = append(fields, enthub.FieldTCPAddress)
	}
	if m.status != nil {
		fields = append(fields, enthub.FieldStatus)
	}
	if m.default_redirection != nil {
		fields = append(fields, enthub.FieldDefaultRedirection)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HubMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enthub.FieldName:
		return m.Name()
	case enthub.FieldSlug:
		return m.Slug()
	case enthub.FieldHubDetails:
		return m.HubDetails()
	case enthub.FieldTCPAddress:
		return m.TCPAddress()
	case enthub.FieldStatus:
		return m.Status()
	case enthub.FieldDefaultRedirection:
		return m.DefaultRedirection()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HubMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enthub.FieldName:
		return m.OldName(ctx)
	case enthub.FieldSlug:
		return m.OldSlug(ctx)
	case enthub.FieldHubDetails:
		return m.OldHubDetails(ctx)
	case enthub.FieldTCPAddress:
		return m.OldTCPAddress(ctx)
	case enthub.FieldStatus:
		return m.OldStatus(ctx)
	case enthub.FieldDefaultRedirection:
		return m.OldDefaultRedirection(ctx)
	}
	return nil, fmt.Errorf("unknown Hub field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HubMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enthub.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case enthub.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case enthub.FieldHubDetails:
		v, ok := value.(types.HubDetails)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHubDetails(v)
		return nil
	case enthub.FieldTCPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTCPAddress(v)
		return nil
	case enthub.FieldStatus:
		v, ok := value.(enums.StatusState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case enthub.FieldDefaultRedirection:
		v, ok := value.(hub.RedirectionOption)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultRedirection(v)
		return nil
	}
	return fmt.Errorf("unknown Hub field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HubMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HubMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HubMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Hub numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HubMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enthub.FieldHubDetails) {
		fields = append(fields, enthub.FieldHubDetails)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HubMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HubMutation) ClearField(name string) error {
	switch name {
	case enthub.FieldHubDetails:
		m.ClearHubDetails()
		return nil
	}
	return fmt.Errorf("unknown Hub nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HubMutation) ResetField(name string) error {
	switch name {
	case enthub.FieldName:
		m.ResetName()
		return nil
	case enthub.FieldSlug:
		m.ResetSlug()
		return nil
	case enthub.FieldHubDetails:
		m.ResetHubDetails()
		return nil
	case enthub.FieldTCPAddress:
		m.ResetTCPAddress()
		return nil
	case enthub.FieldStatus:
		m.ResetStatus()
		return nil
	case enthub.FieldDefaultRedirection:
		m.ResetDefaultRedirection()
		return nil
	}
	return fmt.Errorf("unknown Hub field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HubMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.domain != nil {
		edges = append(edges, enthub.EdgeDomain)
	}
	if m.organization != nil {
		edges = append(edges, enthub.EdgeOrganization)
	}
	if m.links != nil {
		edges = append(edges, enthub.EdgeLinks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HubMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case enthub.EdgeDomain:
		if id := m.domain; id != nil {
			return []ent.Value{*id}
		}
	case enthub.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	case enthub.EdgeLinks:
		ids := make([]ent.Value, 0, len(m.links))
		for id := range m.links {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HubMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedlinks != nil {
		edges = append(edges, enthub.EdgeLinks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HubMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case enthub.EdgeLinks:
		ids := make([]ent.Value, 0, len(m.removedlinks))
		for id := range m.removedlinks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HubMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddomain {
		edges = append(edges, enthub.EdgeDomain)
	}
	if m.clearedorganization {
		edges = append(edges, enthub.EdgeOrganization)
	}
	if m.clearedlinks {
		edges = append(edges, enthub.EdgeLinks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HubMutation) EdgeCleared(name string) bool {
	switch name {
	case enthub.EdgeDomain:
		return m.cleareddomain
	case enthub.EdgeOrganization:
		return m.clearedorganization
	case enthub.EdgeLinks:
		return m.clearedlinks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HubMutation) ClearEdge(name string) error {
	switch name {
	case enthub.EdgeDomain:
		m.ClearDomain()
		return nil
	case enthub.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown Hub unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HubMutation) ResetEdge(name string) error {
	switch name {
	case enthub.EdgeDomain:
		m.ResetDomain()
		return nil
	case enthub.EdgeOrganization:
		m.ResetOrganization()
		return nil
	case enthub.EdgeLinks:
		m.ResetLinks()
		return nil
	}
	return fmt.Errorf("unknown Hub edge %s", name)
}

// LinkMutation represents an operation that mutates the Link nodes in the graph.
type LinkMutation struct {
	config
	op            Op
	typ           string
	id            *schema.LinkID
	target        *string
	_path         *string
	link_content  *types.LinkContent
	status        *enums.StatusState
	clearedFields map[string]struct{}
	hub           *schema.HubID
	clearedhub    bool
	done          bool
	oldValue      func(context.Context) (*Link, error)
	predicates    []predicate.Link
}

var _ ent.Mutation = (*LinkMutation)(nil)

// linkOption allows management of the mutation configuration using functional options.
type linkOption func(*LinkMutation)

// newLinkMutation creates new mutation for the Link entity.
func newLinkMutation(c config, op Op, opts ...linkOption) *LinkMutation {
	m := &LinkMutation{
		config:        c,
		op:            op,
		typ:           TypeLink,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLinkID sets the ID field of the mutation.
func withLinkID(id schema.LinkID) linkOption {
	return func(m *LinkMutation) {
		var (
			err   error
			once  sync.Once
			value *Link
		)
		m.oldValue = func(ctx context.Context) (*Link, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Link.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLink sets the old Link of the mutation.
func withLink(node *Link) linkOption {
	return func(m *LinkMutation) {
		m.oldValue = func(context.Context) (*Link, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LinkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LinkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Link entities.
func (m *LinkMutation) SetID(id schema.LinkID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LinkMutation) ID() (id schema.LinkID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LinkMutation) IDs(ctx context.Context) ([]schema.LinkID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []schema.LinkID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Link.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTarget sets the "target" field.
func (m *LinkMutation) SetTarget(s string) {
	m.target = &s
}

// Target returns the value of the "target" field in the mutation.
func (m *LinkMutation) Target() (r string, exists bool) {
	v := m.target
	if v == nil {
		return
	}
	return *v, true
}

// OldTarget returns the old "target" field's value of the Link entity.
// If the Link object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkMutation) OldTarget(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTarget: %w", err)
	}
	return oldValue.Target, nil
}

// ResetTarget resets all changes to the "target" field.
func (m *LinkMutation) ResetTarget() {
	m.target = nil
}

// SetPath sets the "path" field.
func (m *LinkMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *LinkMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Link entity.
// If the Link object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *LinkMutation) ResetPath() {
	m._path = nil
}

// SetLinkContent sets the "link_content" field.
func (m *LinkMutation) SetLinkContent(tc types.LinkContent) {
	m.link_content = &tc
}

// LinkContent returns the value of the "link_content" field in the mutation.
func (m *LinkMutation) LinkContent() (r types.LinkContent, exists bool) {
	v := m.link_content
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkContent returns the old "link_content" field's value of the Link entity.
// If the Link object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkMutation) OldLinkContent(ctx context.Context) (v types.LinkContent, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkContent: %w", err)
	}
	return oldValue.LinkContent, nil
}

// ClearLinkContent clears the value of the "link_content" field.
func (m *LinkMutation) ClearLinkContent() {
	m.link_content = nil
	m.clearedFields[link.FieldLinkContent] = struct{}{}
}

// LinkContentCleared returns if the "link_content" field was cleared in this mutation.
func (m *LinkMutation) LinkContentCleared() bool {
	_, ok := m.clearedFields[link.FieldLinkContent]
	return ok
}

// ResetLinkContent resets all changes to the "link_content" field.
func (m *LinkMutation) ResetLinkContent() {
	m.link_content = nil
	delete(m.clearedFields, link.FieldLinkContent)
}

// SetStatus sets the "status" field.
func (m *LinkMutation) SetStatus(es enums.StatusState) {
	m.status = &es
}

// Status returns the value of the "status" field in the mutation.
func (m *LinkMutation) Status() (r enums.StatusState, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Link entity.
// If the Link object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LinkMutation) OldStatus(ctx context.Context) (v enums.StatusState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *LinkMutation) ResetStatus() {
	m.status = nil
}

// SetHubID sets the "hub" edge to the Hub entity by id.
func (m *LinkMutation) SetHubID(id schema.HubID) {
	m.hub = &id
}

// ClearHub clears the "hub" edge to the Hub entity.
func (m *LinkMutation) ClearHub() {
	m.clearedhub = true
}

// HubCleared reports if the "hub" edge to the Hub entity was cleared.
func (m *LinkMutation) HubCleared() bool {
	return m.clearedhub
}

// HubID returns the "hub" edge ID in the mutation.
func (m *LinkMutation) HubID() (id schema.HubID, exists bool) {
	if m.hub != nil {
		return *m.hub, true
	}
	return
}

// HubIDs returns the "hub" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HubID instead. It exists only for internal usage by the builders.
func (m *LinkMutation) HubIDs() (ids []schema.HubID) {
	if id := m.hub; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHub resets all changes to the "hub" edge.
func (m *LinkMutation) ResetHub() {
	m.hub = nil
	m.clearedhub = false
}

// Where appends a list predicates to the LinkMutation builder.
func (m *LinkMutation) Where(ps ...predicate.Link) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LinkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LinkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Link, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LinkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LinkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Link).
func (m *LinkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LinkMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.target != nil {
		fields = append(fields, link.FieldTarget)
	}
	if m._path != nil {
		fields = append(fields, link.FieldPath)
	}
	if m.link_content != nil {
		fields = append(fields, link.FieldLinkContent)
	}
	if m.status != nil {
		fields = append(fields, link.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LinkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case link.FieldTarget:
		return m.Target()
	case link.FieldPath:
		return m.Path()
	case link.FieldLinkContent:
		return m.LinkContent()
	case link.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LinkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case link.FieldTarget:
		return m.OldTarget(ctx)
	case link.FieldPath:
		return m.OldPath(ctx)
	case link.FieldLinkContent:
		return m.OldLinkContent(ctx)
	case link.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Link field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case link.FieldTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTarget(v)
		return nil
	case link.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case link.FieldLinkContent:
		v, ok := value.(types.LinkContent)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkContent(v)
		return nil
	case link.FieldStatus:
		v, ok := value.(enums.StatusState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Link field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LinkMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LinkMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LinkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Link numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LinkMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(link.FieldLinkContent) {
		fields = append(fields, link.FieldLinkContent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LinkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LinkMutation) ClearField(name string) error {
	switch name {
	case link.FieldLinkContent:
		m.ClearLinkContent()
		return nil
	}
	return fmt.Errorf("unknown Link nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LinkMutation) ResetField(name string) error {
	switch name {
	case link.FieldTarget:
		m.ResetTarget()
		return nil
	case link.FieldPath:
		m.ResetPath()
		return nil
	case link.FieldLinkContent:
		m.ResetLinkContent()
		return nil
	case link.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Link field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LinkMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.hub != nil {
		edges = append(edges, link.EdgeHub)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LinkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case link.EdgeHub:
		if id := m.hub; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LinkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LinkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LinkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhub {
		edges = append(edges, link.EdgeHub)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LinkMutation) EdgeCleared(name string) bool {
	switch name {
	case link.EdgeHub:
		return m.clearedhub
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LinkMutation) ClearEdge(name string) error {
	switch name {
	case link.EdgeHub:
		m.ClearHub()
		return nil
	}
	return fmt.Errorf("unknown Link unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LinkMutation) ResetEdge(name string) error {
	switch name {
	case link.EdgeHub:
		m.ResetHub()
		return nil
	}
	return fmt.Errorf("unknown Link edge %s", name)
}

// OrganizationMutation represents an operation that mutates the Organization nodes in the graph.
type OrganizationMutation struct {
	config
	op             Op
	typ            string
	id             *schema.OrganizationID
	name           *string
	website        *string
	description    *string
	locagtion      *string
	social_medias  *types.SocialMedias
	clearedFields  map[string]struct{}
	domains        map[schema.DomainID]struct{}
	removeddomains map[schema.DomainID]struct{}
	cleareddomains bool
	hubs           map[schema.HubID]struct{}
	removedhubs    map[schema.HubID]struct{}
	clearedhubs    bool
	done           bool
	oldValue       func(context.Context) (*Organization, error)
	predicates     []predicate.Organization
}

var _ ent.Mutation = (*OrganizationMutation)(nil)

// organizationOption allows management of the mutation configuration using functional options.
type organizationOption func(*OrganizationMutation)

// newOrganizationMutation creates new mutation for the Organization entity.
func newOrganizationMutation(c config, op Op, opts ...organizationOption) *OrganizationMutation {
	m := &OrganizationMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationID sets the ID field of the mutation.
func withOrganizationID(id schema.OrganizationID) organizationOption {
	return func(m *OrganizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Organization
		)
		m.oldValue = func(ctx context.Context) (*Organization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Organization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganization sets the old Organization of the mutation.
func withOrganization(node *Organization) organizationOption {
	return func(m *OrganizationMutation) {
		m.oldValue = func(context.Context) (*Organization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Organization entities.
func (m *OrganizationMutation) SetID(id schema.OrganizationID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationMutation) ID() (id schema.OrganizationID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationMutation) IDs(ctx context.Context) ([]schema.OrganizationID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []schema.OrganizationID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Organization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OrganizationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrganizationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrganizationMutation) ResetName() {
	m.name = nil
}

// SetWebsite sets the "website" field.
func (m *OrganizationMutation) SetWebsite(s string) {
	m.website = &s
}

// Website returns the value of the "website" field in the mutation.
func (m *OrganizationMutation) Website() (r string, exists bool) {
	v := m.website
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsite returns the old "website" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldWebsite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsite: %w", err)
	}
	return oldValue.Website, nil
}

// ClearWebsite clears the value of the "website" field.
func (m *OrganizationMutation) ClearWebsite() {
	m.website = nil
	m.clearedFields[organization.FieldWebsite] = struct{}{}
}

// WebsiteCleared returns if the "website" field was cleared in this mutation.
func (m *OrganizationMutation) WebsiteCleared() bool {
	_, ok := m.clearedFields[organization.FieldWebsite]
	return ok
}

// ResetWebsite resets all changes to the "website" field.
func (m *OrganizationMutation) ResetWebsite() {
	m.website = nil
	delete(m.clearedFields, organization.FieldWebsite)
}

// SetDescription sets the "description" field.
func (m *OrganizationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OrganizationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *OrganizationMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[organization.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *OrganizationMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[organization.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *OrganizationMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, organization.FieldDescription)
}

// SetLocagtion sets the "locagtion" field.
func (m *OrganizationMutation) SetLocagtion(s string) {
	m.locagtion = &s
}

// Locagtion returns the value of the "locagtion" field in the mutation.
func (m *OrganizationMutation) Locagtion() (r string, exists bool) {
	v := m.locagtion
	if v == nil {
		return
	}
	return *v, true
}

// OldLocagtion returns the old "locagtion" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldLocagtion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocagtion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocagtion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocagtion: %w", err)
	}
	return oldValue.Locagtion, nil
}

// ClearLocagtion clears the value of the "locagtion" field.
func (m *OrganizationMutation) ClearLocagtion() {
	m.locagtion = nil
	m.clearedFields[organization.FieldLocagtion] = struct{}{}
}

// LocagtionCleared returns if the "locagtion" field was cleared in this mutation.
func (m *OrganizationMutation) LocagtionCleared() bool {
	_, ok := m.clearedFields[organization.FieldLocagtion]
	return ok
}

// ResetLocagtion resets all changes to the "locagtion" field.
func (m *OrganizationMutation) ResetLocagtion() {
	m.locagtion = nil
	delete(m.clearedFields, organization.FieldLocagtion)
}

// SetSocialMedias sets the "social_medias" field.
func (m *OrganizationMutation) SetSocialMedias(tm types.SocialMedias) {
	m.social_medias = &tm
}

// SocialMedias returns the value of the "social_medias" field in the mutation.
func (m *OrganizationMutation) SocialMedias() (r types.SocialMedias, exists bool) {
	v := m.social_medias
	if v == nil {
		return
	}
	return *v, true
}

// OldSocialMedias returns the old "social_medias" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldSocialMedias(ctx context.Context) (v types.SocialMedias, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSocialMedias is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSocialMedias requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSocialMedias: %w", err)
	}
	return oldValue.SocialMedias, nil
}

// ClearSocialMedias clears the value of the "social_medias" field.
func (m *OrganizationMutation) ClearSocialMedias() {
	m.social_medias = nil
	m.clearedFields[organization.FieldSocialMedias] = struct{}{}
}

// SocialMediasCleared returns if the "social_medias" field was cleared in this mutation.
func (m *OrganizationMutation) SocialMediasCleared() bool {
	_, ok := m.clearedFields[organization.FieldSocialMedias]
	return ok
}

// ResetSocialMedias resets all changes to the "social_medias" field.
func (m *OrganizationMutation) ResetSocialMedias() {
	m.social_medias = nil
	delete(m.clearedFields, organization.FieldSocialMedias)
}

// AddDomainIDs adds the "domains" edge to the Domain entity by ids.
func (m *OrganizationMutation) AddDomainIDs(ids ...schema.DomainID) {
	if m.domains == nil {
		m.domains = make(map[schema.DomainID]struct{})
	}
	for i := range ids {
		m.domains[ids[i]] = struct{}{}
	}
}

// ClearDomains clears the "domains" edge to the Domain entity.
func (m *OrganizationMutation) ClearDomains() {
	m.cleareddomains = true
}

// DomainsCleared reports if the "domains" edge to the Domain entity was cleared.
func (m *OrganizationMutation) DomainsCleared() bool {
	return m.cleareddomains
}

// RemoveDomainIDs removes the "domains" edge to the Domain entity by IDs.
func (m *OrganizationMutation) RemoveDomainIDs(ids ...schema.DomainID) {
	if m.removeddomains == nil {
		m.removeddomains = make(map[schema.DomainID]struct{})
	}
	for i := range ids {
		delete(m.domains, ids[i])
		m.removeddomains[ids[i]] = struct{}{}
	}
}

// RemovedDomains returns the removed IDs of the "domains" edge to the Domain entity.
func (m *OrganizationMutation) RemovedDomainsIDs() (ids []schema.DomainID) {
	for id := range m.removeddomains {
		ids = append(ids, id)
	}
	return
}

// DomainsIDs returns the "domains" edge IDs in the mutation.
func (m *OrganizationMutation) DomainsIDs() (ids []schema.DomainID) {
	for id := range m.domains {
		ids = append(ids, id)
	}
	return
}

// ResetDomains resets all changes to the "domains" edge.
func (m *OrganizationMutation) ResetDomains() {
	m.domains = nil
	m.cleareddomains = false
	m.removeddomains = nil
}

// AddHubIDs adds the "hubs" edge to the Hub entity by ids.
func (m *OrganizationMutation) AddHubIDs(ids ...schema.HubID) {
	if m.hubs == nil {
		m.hubs = make(map[schema.HubID]struct{})
	}
	for i := range ids {
		m.hubs[ids[i]] = struct{}{}
	}
}

// ClearHubs clears the "hubs" edge to the Hub entity.
func (m *OrganizationMutation) ClearHubs() {
	m.clearedhubs = true
}

// HubsCleared reports if the "hubs" edge to the Hub entity was cleared.
func (m *OrganizationMutation) HubsCleared() bool {
	return m.clearedhubs
}

// RemoveHubIDs removes the "hubs" edge to the Hub entity by IDs.
func (m *OrganizationMutation) RemoveHubIDs(ids ...schema.HubID) {
	if m.removedhubs == nil {
		m.removedhubs = make(map[schema.HubID]struct{})
	}
	for i := range ids {
		delete(m.hubs, ids[i])
		m.removedhubs[ids[i]] = struct{}{}
	}
}

// RemovedHubs returns the removed IDs of the "hubs" edge to the Hub entity.
func (m *OrganizationMutation) RemovedHubsIDs() (ids []schema.HubID) {
	for id := range m.removedhubs {
		ids = append(ids, id)
	}
	return
}

// HubsIDs returns the "hubs" edge IDs in the mutation.
func (m *OrganizationMutation) HubsIDs() (ids []schema.HubID) {
	for id := range m.hubs {
		ids = append(ids, id)
	}
	return
}

// ResetHubs resets all changes to the "hubs" edge.
func (m *OrganizationMutation) ResetHubs() {
	m.hubs = nil
	m.clearedhubs = false
	m.removedhubs = nil
}

// Where appends a list predicates to the OrganizationMutation builder.
func (m *OrganizationMutation) Where(ps ...predicate.Organization) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Organization, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Organization).
func (m *OrganizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, organization.FieldName)
	}
	if m.website != nil {
		fields = append(fields, organization.FieldWebsite)
	}
	if m.description != nil {
		fields = append(fields, organization.FieldDescription)
	}
	if m.locagtion != nil {
		fields = append(fields, organization.FieldLocagtion)
	}
	if m.social_medias != nil {
		fields = append(fields, organization.FieldSocialMedias)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organization.FieldName:
		return m.Name()
	case organization.FieldWebsite:
		return m.Website()
	case organization.FieldDescription:
		return m.Description()
	case organization.FieldLocagtion:
		return m.Locagtion()
	case organization.FieldSocialMedias:
		return m.SocialMedias()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organization.FieldName:
		return m.OldName(ctx)
	case organization.FieldWebsite:
		return m.OldWebsite(ctx)
	case organization.FieldDescription:
		return m.OldDescription(ctx)
	case organization.FieldLocagtion:
		return m.OldLocagtion(ctx)
	case organization.FieldSocialMedias:
		return m.OldSocialMedias(ctx)
	}
	return nil, fmt.Errorf("unknown Organization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organization.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case organization.FieldWebsite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsite(v)
		return nil
	case organization.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case organization.FieldLocagtion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocagtion(v)
		return nil
	case organization.FieldSocialMedias:
		v, ok := value.(types.SocialMedias)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSocialMedias(v)
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Organization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organization.FieldWebsite) {
		fields = append(fields, organization.FieldWebsite)
	}
	if m.FieldCleared(organization.FieldDescription) {
		fields = append(fields, organization.FieldDescription)
	}
	if m.FieldCleared(organization.FieldLocagtion) {
		fields = append(fields, organization.FieldLocagtion)
	}
	if m.FieldCleared(organization.FieldSocialMedias) {
		fields = append(fields, organization.FieldSocialMedias)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationMutation) ClearField(name string) error {
	switch name {
	case organization.FieldWebsite:
		m.ClearWebsite()
		return nil
	case organization.FieldDescription:
		m.ClearDescription()
		return nil
	case organization.FieldLocagtion:
		m.ClearLocagtion()
		return nil
	case organization.FieldSocialMedias:
		m.ClearSocialMedias()
		return nil
	}
	return fmt.Errorf("unknown Organization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationMutation) ResetField(name string) error {
	switch name {
	case organization.FieldName:
		m.ResetName()
		return nil
	case organization.FieldWebsite:
		m.ResetWebsite()
		return nil
	case organization.FieldDescription:
		m.ResetDescription()
		return nil
	case organization.FieldLocagtion:
		m.ResetLocagtion()
		return nil
	case organization.FieldSocialMedias:
		m.ResetSocialMedias()
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.domains != nil {
		edges = append(edges, organization.EdgeDomains)
	}
	if m.hubs != nil {
		edges = append(edges, organization.EdgeHubs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeDomains:
		ids := make([]ent.Value, 0, len(m.domains))
		for id := range m.domains {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeHubs:
		ids := make([]ent.Value, 0, len(m.hubs))
		for id := range m.hubs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddomains != nil {
		edges = append(edges, organization.EdgeDomains)
	}
	if m.removedhubs != nil {
		edges = append(edges, organization.EdgeHubs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeDomains:
		ids := make([]ent.Value, 0, len(m.removeddomains))
		for id := range m.removeddomains {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeHubs:
		ids := make([]ent.Value, 0, len(m.removedhubs))
		for id := range m.removedhubs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddomains {
		edges = append(edges, organization.EdgeDomains)
	}
	if m.clearedhubs {
		edges = append(edges, organization.EdgeHubs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationMutation) EdgeCleared(name string) bool {
	switch name {
	case organization.EdgeDomains:
		return m.cleareddomains
	case organization.EdgeHubs:
		return m.clearedhubs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Organization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationMutation) ResetEdge(name string) error {
	switch name {
	case organization.EdgeDomains:
		m.ResetDomains()
		return nil
	case organization.EdgeHubs:
		m.ResetHubs()
		return nil
	}
	return fmt.Errorf("unknown Organization edge %s", name)
}
