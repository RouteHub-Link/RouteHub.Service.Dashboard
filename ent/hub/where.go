// Code generated by ent, DO NOT EDIT.

package enthub

import (
	"time"

	"RouteHub.Service.Dashboard/ent/predicate"
	"RouteHub.Service.Dashboard/ent/schema/enums"
	"RouteHub.Service.Dashboard/ent/schema/enums/hub"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id mixin.ID) predicate.Hub {
	return predicate.Hub(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldSlug, v))
}

// TCPAddress applies equality check predicate on the "tcp_address" field. It's identical to TCPAddressEQ.
func TCPAddress(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldTCPAddress, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Hub {
	return predicate.Hub(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Hub {
	return predicate.Hub(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Hub {
	return predicate.Hub(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Hub {
	return predicate.Hub(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Hub {
	return predicate.Hub(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Hub {
	return predicate.Hub(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Hub {
	return predicate.Hub(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Hub {
	return predicate.Hub(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Hub {
	return predicate.Hub(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Hub {
	return predicate.Hub(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Hub {
	return predicate.Hub(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Hub {
	return predicate.Hub(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Hub {
	return predicate.Hub(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Hub {
	return predicate.Hub(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Hub {
	return predicate.Hub(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Hub {
	return predicate.Hub(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Hub {
	return predicate.Hub(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Hub {
	return predicate.Hub(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Hub {
	return predicate.Hub(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Hub {
	return predicate.Hub(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Hub {
	return predicate.Hub(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Hub {
	return predicate.Hub(sql.FieldContainsFold(FieldSlug, v))
}

// HubDetailsIsNil applies the IsNil predicate on the "hub_details" field.
func HubDetailsIsNil() predicate.Hub {
	return predicate.Hub(sql.FieldIsNull(FieldHubDetails))
}

// HubDetailsNotNil applies the NotNil predicate on the "hub_details" field.
func HubDetailsNotNil() predicate.Hub {
	return predicate.Hub(sql.FieldNotNull(FieldHubDetails))
}

// TCPAddressEQ applies the EQ predicate on the "tcp_address" field.
func TCPAddressEQ(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldTCPAddress, v))
}

// TCPAddressNEQ applies the NEQ predicate on the "tcp_address" field.
func TCPAddressNEQ(v string) predicate.Hub {
	return predicate.Hub(sql.FieldNEQ(FieldTCPAddress, v))
}

// TCPAddressIn applies the In predicate on the "tcp_address" field.
func TCPAddressIn(vs ...string) predicate.Hub {
	return predicate.Hub(sql.FieldIn(FieldTCPAddress, vs...))
}

// TCPAddressNotIn applies the NotIn predicate on the "tcp_address" field.
func TCPAddressNotIn(vs ...string) predicate.Hub {
	return predicate.Hub(sql.FieldNotIn(FieldTCPAddress, vs...))
}

// TCPAddressGT applies the GT predicate on the "tcp_address" field.
func TCPAddressGT(v string) predicate.Hub {
	return predicate.Hub(sql.FieldGT(FieldTCPAddress, v))
}

// TCPAddressGTE applies the GTE predicate on the "tcp_address" field.
func TCPAddressGTE(v string) predicate.Hub {
	return predicate.Hub(sql.FieldGTE(FieldTCPAddress, v))
}

// TCPAddressLT applies the LT predicate on the "tcp_address" field.
func TCPAddressLT(v string) predicate.Hub {
	return predicate.Hub(sql.FieldLT(FieldTCPAddress, v))
}

// TCPAddressLTE applies the LTE predicate on the "tcp_address" field.
func TCPAddressLTE(v string) predicate.Hub {
	return predicate.Hub(sql.FieldLTE(FieldTCPAddress, v))
}

// TCPAddressContains applies the Contains predicate on the "tcp_address" field.
func TCPAddressContains(v string) predicate.Hub {
	return predicate.Hub(sql.FieldContains(FieldTCPAddress, v))
}

// TCPAddressHasPrefix applies the HasPrefix predicate on the "tcp_address" field.
func TCPAddressHasPrefix(v string) predicate.Hub {
	return predicate.Hub(sql.FieldHasPrefix(FieldTCPAddress, v))
}

// TCPAddressHasSuffix applies the HasSuffix predicate on the "tcp_address" field.
func TCPAddressHasSuffix(v string) predicate.Hub {
	return predicate.Hub(sql.FieldHasSuffix(FieldTCPAddress, v))
}

// TCPAddressEqualFold applies the EqualFold predicate on the "tcp_address" field.
func TCPAddressEqualFold(v string) predicate.Hub {
	return predicate.Hub(sql.FieldEqualFold(FieldTCPAddress, v))
}

// TCPAddressContainsFold applies the ContainsFold predicate on the "tcp_address" field.
func TCPAddressContainsFold(v string) predicate.Hub {
	return predicate.Hub(sql.FieldContainsFold(FieldTCPAddress, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.StatusState) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.StatusState) predicate.Hub {
	return predicate.Hub(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.StatusState) predicate.Hub {
	return predicate.Hub(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.StatusState) predicate.Hub {
	return predicate.Hub(sql.FieldNotIn(FieldStatus, vs...))
}

// DefaultRedirectionEQ applies the EQ predicate on the "default_redirection" field.
func DefaultRedirectionEQ(v hub.RedirectionOption) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldDefaultRedirection, v))
}

// DefaultRedirectionNEQ applies the NEQ predicate on the "default_redirection" field.
func DefaultRedirectionNEQ(v hub.RedirectionOption) predicate.Hub {
	return predicate.Hub(sql.FieldNEQ(FieldDefaultRedirection, v))
}

// DefaultRedirectionIn applies the In predicate on the "default_redirection" field.
func DefaultRedirectionIn(vs ...hub.RedirectionOption) predicate.Hub {
	return predicate.Hub(sql.FieldIn(FieldDefaultRedirection, vs...))
}

// DefaultRedirectionNotIn applies the NotIn predicate on the "default_redirection" field.
func DefaultRedirectionNotIn(vs ...hub.RedirectionOption) predicate.Hub {
	return predicate.Hub(sql.FieldNotIn(FieldDefaultRedirection, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Hub {
	return predicate.Hub(sql.FieldLTE(FieldCreatedAt, v))
}

// HasDomain applies the HasEdge predicate on the "domain" edge.
func HasDomain() predicate.Hub {
	return predicate.Hub(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DomainTable, DomainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainWith applies the HasEdge predicate on the "domain" edge with a given conditions (other predicates).
func HasDomainWith(preds ...predicate.Domain) predicate.Hub {
	return predicate.Hub(func(s *sql.Selector) {
		step := newDomainStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Hub {
	return predicate.Hub(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Hub {
	return predicate.Hub(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLinks applies the HasEdge predicate on the "links" edge.
func HasLinks() predicate.Hub {
	return predicate.Hub(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LinksTable, LinksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinksWith applies the HasEdge predicate on the "links" edge with a given conditions (other predicates).
func HasLinksWith(preds ...predicate.Link) predicate.Hub {
	return predicate.Hub(func(s *sql.Selector) {
		step := newLinksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hub) predicate.Hub {
	return predicate.Hub(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hub) predicate.Hub {
	return predicate.Hub(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hub) predicate.Hub {
	return predicate.Hub(sql.NotPredicates(p))
}
