// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	entdomain "RouteHub.Service.Dashboard/ent/domain"
	enthub "RouteHub.Service.Dashboard/ent/hub"
	"RouteHub.Service.Dashboard/ent/link"
	"RouteHub.Service.Dashboard/ent/organization"
	"RouteHub.Service.Dashboard/ent/schema/enums"
	"RouteHub.Service.Dashboard/ent/schema/enums/hub"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"RouteHub.Service.Dashboard/ent/schema/types"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HubCreate is the builder for creating a Hub entity.
type HubCreate struct {
	config
	mutation *HubMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (hc *HubCreate) SetName(s string) *HubCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetSlug sets the "slug" field.
func (hc *HubCreate) SetSlug(s string) *HubCreate {
	hc.mutation.SetSlug(s)
	return hc
}

// SetHubDetails sets the "hub_details" field.
func (hc *HubCreate) SetHubDetails(td types.HubDetails) *HubCreate {
	hc.mutation.SetHubDetails(td)
	return hc
}

// SetNillableHubDetails sets the "hub_details" field if the given value is not nil.
func (hc *HubCreate) SetNillableHubDetails(td *types.HubDetails) *HubCreate {
	if td != nil {
		hc.SetHubDetails(*td)
	}
	return hc
}

// SetTCPAddress sets the "tcp_address" field.
func (hc *HubCreate) SetTCPAddress(s string) *HubCreate {
	hc.mutation.SetTCPAddress(s)
	return hc
}

// SetStatus sets the "status" field.
func (hc *HubCreate) SetStatus(es enums.StatusState) *HubCreate {
	hc.mutation.SetStatus(es)
	return hc
}

// SetDefaultRedirection sets the "default_redirection" field.
func (hc *HubCreate) SetDefaultRedirection(ho hub.RedirectionOption) *HubCreate {
	hc.mutation.SetDefaultRedirection(ho)
	return hc
}

// SetID sets the "id" field.
func (hc *HubCreate) SetID(m mixin.ID) *HubCreate {
	hc.mutation.SetID(m)
	return hc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hc *HubCreate) SetNillableID(m *mixin.ID) *HubCreate {
	if m != nil {
		hc.SetID(*m)
	}
	return hc
}

// SetDomainID sets the "domain" edge to the Domain entity by ID.
func (hc *HubCreate) SetDomainID(id mixin.ID) *HubCreate {
	hc.mutation.SetDomainID(id)
	return hc
}

// SetDomain sets the "domain" edge to the Domain entity.
func (hc *HubCreate) SetDomain(d *Domain) *HubCreate {
	return hc.SetDomainID(d.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (hc *HubCreate) SetOrganizationID(id mixin.ID) *HubCreate {
	hc.mutation.SetOrganizationID(id)
	return hc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (hc *HubCreate) SetOrganization(o *Organization) *HubCreate {
	return hc.SetOrganizationID(o.ID)
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (hc *HubCreate) AddLinkIDs(ids ...mixin.ID) *HubCreate {
	hc.mutation.AddLinkIDs(ids...)
	return hc
}

// AddLinks adds the "links" edges to the Link entity.
func (hc *HubCreate) AddLinks(l ...*Link) *HubCreate {
	ids := make([]mixin.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return hc.AddLinkIDs(ids...)
}

// Mutation returns the HubMutation object of the builder.
func (hc *HubCreate) Mutation() *HubMutation {
	return hc.mutation
}

// Save creates the Hub in the database.
func (hc *HubCreate) Save(ctx context.Context) (*Hub, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HubCreate) SaveX(ctx context.Context) *Hub {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HubCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HubCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HubCreate) defaults() {
	if _, ok := hc.mutation.ID(); !ok {
		v := enthub.DefaultID()
		hc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HubCreate) check() error {
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Hub.name"`)}
	}
	if v, ok := hc.mutation.Name(); ok {
		if err := enthub.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Hub.name": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Hub.slug"`)}
	}
	if v, ok := hc.mutation.Slug(); ok {
		if err := enthub.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Hub.slug": %w`, err)}
		}
	}
	if _, ok := hc.mutation.TCPAddress(); !ok {
		return &ValidationError{Name: "tcp_address", err: errors.New(`ent: missing required field "Hub.tcp_address"`)}
	}
	if v, ok := hc.mutation.TCPAddress(); ok {
		if err := enthub.TCPAddressValidator(v); err != nil {
			return &ValidationError{Name: "tcp_address", err: fmt.Errorf(`ent: validator failed for field "Hub.tcp_address": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Hub.status"`)}
	}
	if v, ok := hc.mutation.Status(); ok {
		if err := enthub.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Hub.status": %w`, err)}
		}
	}
	if _, ok := hc.mutation.DefaultRedirection(); !ok {
		return &ValidationError{Name: "default_redirection", err: errors.New(`ent: missing required field "Hub.default_redirection"`)}
	}
	if v, ok := hc.mutation.DefaultRedirection(); ok {
		if err := enthub.DefaultRedirectionValidator(v); err != nil {
			return &ValidationError{Name: "default_redirection", err: fmt.Errorf(`ent: validator failed for field "Hub.default_redirection": %w`, err)}
		}
	}
	if len(hc.mutation.DomainIDs()) == 0 {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required edge "Hub.domain"`)}
	}
	if len(hc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Hub.organization"`)}
	}
	return nil
}

func (hc *HubCreate) sqlSave(ctx context.Context) (*Hub, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(mixin.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Hub.ID type: %T", _spec.ID.Value)
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HubCreate) createSpec() (*Hub, *sqlgraph.CreateSpec) {
	var (
		_node = &Hub{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(enthub.Table, sqlgraph.NewFieldSpec(enthub.FieldID, field.TypeString))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(enthub.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hc.mutation.Slug(); ok {
		_spec.SetField(enthub.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := hc.mutation.HubDetails(); ok {
		_spec.SetField(enthub.FieldHubDetails, field.TypeJSON, value)
		_node.HubDetails = value
	}
	if value, ok := hc.mutation.TCPAddress(); ok {
		_spec.SetField(enthub.FieldTCPAddress, field.TypeString, value)
		_node.TCPAddress = value
	}
	if value, ok := hc.mutation.Status(); ok {
		_spec.SetField(enthub.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := hc.mutation.DefaultRedirection(); ok {
		_spec.SetField(enthub.FieldDefaultRedirection, field.TypeEnum, value)
		_node.DefaultRedirection = value
	}
	if nodes := hc.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enthub.DomainTable,
			Columns: []string{enthub.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entdomain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.domain_fk = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enthub.OrganizationTable,
			Columns: []string{enthub.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enthub.LinksTable,
			Columns: []string{enthub.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HubCreateBulk is the builder for creating many Hub entities in bulk.
type HubCreateBulk struct {
	config
	err      error
	builders []*HubCreate
}

// Save creates the Hub entities in the database.
func (hcb *HubCreateBulk) Save(ctx context.Context) ([]*Hub, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hub, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HubCreateBulk) SaveX(ctx context.Context) []*Hub {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HubCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HubCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
