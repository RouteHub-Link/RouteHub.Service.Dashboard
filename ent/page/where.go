// Code generated by ent, DO NOT EDIT.

package page

import (
	"time"

	"RouteHub.Service.Dashboard/ent/predicate"
	"RouteHub.Service.Dashboard/ent/schema/enums"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id mixin.ID) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSlug, v))
}

// PageDescription applies equality check predicate on the "page_description" field. It's identical to PageDescriptionEQ.
func PageDescription(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPageDescription, v))
}

// PageContentJSON applies equality check predicate on the "page_content_json" field. It's identical to PageContentJSONEQ.
func PageContentJSON(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPageContentJSON, v))
}

// PageContentHTML applies equality check predicate on the "page_content_html" field. It's identical to PageContentHTMLEQ.
func PageContentHTML(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPageContentHTML, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldSlug, v))
}

// PageDescriptionEQ applies the EQ predicate on the "page_description" field.
func PageDescriptionEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPageDescription, v))
}

// PageDescriptionNEQ applies the NEQ predicate on the "page_description" field.
func PageDescriptionNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldPageDescription, v))
}

// PageDescriptionIn applies the In predicate on the "page_description" field.
func PageDescriptionIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldPageDescription, vs...))
}

// PageDescriptionNotIn applies the NotIn predicate on the "page_description" field.
func PageDescriptionNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldPageDescription, vs...))
}

// PageDescriptionGT applies the GT predicate on the "page_description" field.
func PageDescriptionGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldPageDescription, v))
}

// PageDescriptionGTE applies the GTE predicate on the "page_description" field.
func PageDescriptionGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldPageDescription, v))
}

// PageDescriptionLT applies the LT predicate on the "page_description" field.
func PageDescriptionLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldPageDescription, v))
}

// PageDescriptionLTE applies the LTE predicate on the "page_description" field.
func PageDescriptionLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldPageDescription, v))
}

// PageDescriptionContains applies the Contains predicate on the "page_description" field.
func PageDescriptionContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldPageDescription, v))
}

// PageDescriptionHasPrefix applies the HasPrefix predicate on the "page_description" field.
func PageDescriptionHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldPageDescription, v))
}

// PageDescriptionHasSuffix applies the HasSuffix predicate on the "page_description" field.
func PageDescriptionHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldPageDescription, v))
}

// PageDescriptionIsNil applies the IsNil predicate on the "page_description" field.
func PageDescriptionIsNil() predicate.Page {
	return predicate.Page(sql.FieldIsNull(FieldPageDescription))
}

// PageDescriptionNotNil applies the NotNil predicate on the "page_description" field.
func PageDescriptionNotNil() predicate.Page {
	return predicate.Page(sql.FieldNotNull(FieldPageDescription))
}

// PageDescriptionEqualFold applies the EqualFold predicate on the "page_description" field.
func PageDescriptionEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldPageDescription, v))
}

// PageDescriptionContainsFold applies the ContainsFold predicate on the "page_description" field.
func PageDescriptionContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldPageDescription, v))
}

// PageContentJSONEQ applies the EQ predicate on the "page_content_json" field.
func PageContentJSONEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPageContentJSON, v))
}

// PageContentJSONNEQ applies the NEQ predicate on the "page_content_json" field.
func PageContentJSONNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldPageContentJSON, v))
}

// PageContentJSONIn applies the In predicate on the "page_content_json" field.
func PageContentJSONIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldPageContentJSON, vs...))
}

// PageContentJSONNotIn applies the NotIn predicate on the "page_content_json" field.
func PageContentJSONNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldPageContentJSON, vs...))
}

// PageContentJSONGT applies the GT predicate on the "page_content_json" field.
func PageContentJSONGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldPageContentJSON, v))
}

// PageContentJSONGTE applies the GTE predicate on the "page_content_json" field.
func PageContentJSONGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldPageContentJSON, v))
}

// PageContentJSONLT applies the LT predicate on the "page_content_json" field.
func PageContentJSONLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldPageContentJSON, v))
}

// PageContentJSONLTE applies the LTE predicate on the "page_content_json" field.
func PageContentJSONLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldPageContentJSON, v))
}

// PageContentJSONContains applies the Contains predicate on the "page_content_json" field.
func PageContentJSONContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldPageContentJSON, v))
}

// PageContentJSONHasPrefix applies the HasPrefix predicate on the "page_content_json" field.
func PageContentJSONHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldPageContentJSON, v))
}

// PageContentJSONHasSuffix applies the HasSuffix predicate on the "page_content_json" field.
func PageContentJSONHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldPageContentJSON, v))
}

// PageContentJSONIsNil applies the IsNil predicate on the "page_content_json" field.
func PageContentJSONIsNil() predicate.Page {
	return predicate.Page(sql.FieldIsNull(FieldPageContentJSON))
}

// PageContentJSONNotNil applies the NotNil predicate on the "page_content_json" field.
func PageContentJSONNotNil() predicate.Page {
	return predicate.Page(sql.FieldNotNull(FieldPageContentJSON))
}

// PageContentJSONEqualFold applies the EqualFold predicate on the "page_content_json" field.
func PageContentJSONEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldPageContentJSON, v))
}

// PageContentJSONContainsFold applies the ContainsFold predicate on the "page_content_json" field.
func PageContentJSONContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldPageContentJSON, v))
}

// PageContentHTMLEQ applies the EQ predicate on the "page_content_html" field.
func PageContentHTMLEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPageContentHTML, v))
}

// PageContentHTMLNEQ applies the NEQ predicate on the "page_content_html" field.
func PageContentHTMLNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldPageContentHTML, v))
}

// PageContentHTMLIn applies the In predicate on the "page_content_html" field.
func PageContentHTMLIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldPageContentHTML, vs...))
}

// PageContentHTMLNotIn applies the NotIn predicate on the "page_content_html" field.
func PageContentHTMLNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldPageContentHTML, vs...))
}

// PageContentHTMLGT applies the GT predicate on the "page_content_html" field.
func PageContentHTMLGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldPageContentHTML, v))
}

// PageContentHTMLGTE applies the GTE predicate on the "page_content_html" field.
func PageContentHTMLGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldPageContentHTML, v))
}

// PageContentHTMLLT applies the LT predicate on the "page_content_html" field.
func PageContentHTMLLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldPageContentHTML, v))
}

// PageContentHTMLLTE applies the LTE predicate on the "page_content_html" field.
func PageContentHTMLLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldPageContentHTML, v))
}

// PageContentHTMLContains applies the Contains predicate on the "page_content_html" field.
func PageContentHTMLContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldPageContentHTML, v))
}

// PageContentHTMLHasPrefix applies the HasPrefix predicate on the "page_content_html" field.
func PageContentHTMLHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldPageContentHTML, v))
}

// PageContentHTMLHasSuffix applies the HasSuffix predicate on the "page_content_html" field.
func PageContentHTMLHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldPageContentHTML, v))
}

// PageContentHTMLIsNil applies the IsNil predicate on the "page_content_html" field.
func PageContentHTMLIsNil() predicate.Page {
	return predicate.Page(sql.FieldIsNull(FieldPageContentHTML))
}

// PageContentHTMLNotNil applies the NotNil predicate on the "page_content_html" field.
func PageContentHTMLNotNil() predicate.Page {
	return predicate.Page(sql.FieldNotNull(FieldPageContentHTML))
}

// PageContentHTMLEqualFold applies the EqualFold predicate on the "page_content_html" field.
func PageContentHTMLEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldPageContentHTML, v))
}

// PageContentHTMLContainsFold applies the ContainsFold predicate on the "page_content_html" field.
func PageContentHTMLContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldPageContentHTML, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.StatusState) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.StatusState) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.StatusState) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.StatusState) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldStatus, vs...))
}

// MetaDescriptionIsNil applies the IsNil predicate on the "meta_description" field.
func MetaDescriptionIsNil() predicate.Page {
	return predicate.Page(sql.FieldIsNull(FieldMetaDescription))
}

// MetaDescriptionNotNil applies the NotNil predicate on the "meta_description" field.
func MetaDescriptionNotNil() predicate.Page {
	return predicate.Page(sql.FieldNotNull(FieldMetaDescription))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldCreatedAt, v))
}

// HasHub applies the HasEdge predicate on the "hub" edge.
func HasHub() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HubTable, HubColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHubWith applies the HasEdge predicate on the "hub" edge with a given conditions (other predicates).
func HasHubWith(preds ...predicate.Hub) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := newHubStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Page) predicate.Page {
	return predicate.Page(sql.NotPredicates(p))
}
