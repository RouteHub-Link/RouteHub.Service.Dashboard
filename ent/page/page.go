// Code generated by ent, DO NOT EDIT.

package page

import (
	"fmt"
	"time"

	"RouteHub.Service.Dashboard/ent/schema/enums"
	"RouteHub.Service.Dashboard/ent/schema/mixin"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the page type in the database.
	Label = "page"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldPageDescription holds the string denoting the page_description field in the database.
	FieldPageDescription = "page_description"
	// FieldPageContentJSON holds the string denoting the page_content_json field in the database.
	FieldPageContentJSON = "page_content_json"
	// FieldPageContentHTML holds the string denoting the page_content_html field in the database.
	FieldPageContentHTML = "page_content_html"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMetaDescription holds the string denoting the meta_description field in the database.
	FieldMetaDescription = "meta_description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeHub holds the string denoting the hub edge name in mutations.
	EdgeHub = "hub"
	// Table holds the table name of the page in the database.
	Table = "pages"
	// HubTable is the table that holds the hub relation/edge.
	HubTable = "pages"
	// HubInverseTable is the table name for the Hub entity.
	// It exists in this package in order to avoid circular dependency with the "hub" package.
	HubInverseTable = "hubs"
	// HubColumn is the table column denoting the hub relation/edge.
	HubColumn = "hub_fk"
)

// Columns holds all SQL columns for page fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldPageDescription,
	FieldPageContentJSON,
	FieldPageContentHTML,
	FieldStatus,
	FieldMetaDescription,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hub_fk",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "RouteHub.Service.Dashboard/ent/runtime"
var (
	Hooks [1]ent.Hook
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() mixin.ID
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.StatusState) error {
	switch s.String() {
	case "STATUS_INACTIVE", "STATUS_ACTIVE":
		return nil
	default:
		return fmt.Errorf("page: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Page queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByPageDescription orders the results by the page_description field.
func ByPageDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPageDescription, opts...).ToFunc()
}

// ByPageContentJSON orders the results by the page_content_json field.
func ByPageContentJSON(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPageContentJSON, opts...).ToFunc()
}

// ByPageContentHTML orders the results by the page_content_html field.
func ByPageContentHTML(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPageContentHTML, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByHubField orders the results by hub field.
func ByHubField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHubStep(), sql.OrderByField(field, opts...))
	}
}
func newHubStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HubInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HubTable, HubColumn),
	)
}
